# -*- coding: utf-8 -*-
"""Linear v/s Polynomial Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gqoCI7-Uokawa5IUG9oR-3e3v8Q_cwdu
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as ply

import seaborn as sns

df= pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/MPG.csv')

df.head()

df.info()

df.dropna(inplace=True)

df['model_year']=pd.to_datetime(df['model_year'], format='%y')

df.describe(include='all')

df.corr()

df['origin'].value_counts()

df.replace({'origin':{'usa':0, 'japan':1,'europe':2 }}, inplace=True)

sns.pairplot(df, x_vars= ['displacement','horsepower','weight','acceleration','mpg'], y_vars=['mpg'])

df.columns

y=df['mpg']

x=df[['horsepower','weight']]

# For each x, calculate VIF and save in dataframe 
from statsmodels.stats.outliers_influence import variance_inflation_factor

vif=pd.DataFrame()

vif["VIF Factor"]= [variance_inflation_factor(x.values, i) for i in range (x.shape[1])]

vif["features"]=x.columns

vif.round(1)

vif.round(2)

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test= train_test_split(x,y,train_size=0.7, random_state=192529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

from sklearn.preprocessing import StandardScaler

ss= StandardScaler()

x_train= ss.fit_transform(x_train)

x_test= ss.fit_transform(x_test)

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(x_train,y_train)

lr.intercept_

lr.coef_

y_pred=lr.predict(x_test)

from sklearn.metrics import mean_absolute_percentage_error, r2_score

mean_absolute_percentage_error(y_test, y_pred)

r2_score(y_test, y_pred)



from sklearn.preprocessing import PolynomialFeatures

poly=PolynomialFeatures(degree=2)

x_train2= poly.fit_transform(x_train)

x_train2= pd.DataFrame(x_train2, columns=['bias', 'horsepower', 'weight', 'square of horsepower','horsepower*weight','square of horsepower'])

x_train2

x_test2= poly.fit_transform(x_test)
x_test2= pd.DataFrame(x_test2, columns=['bias', 'horsepower', 'weight', 'square of horsepower','horsepower*weight','square of horsepower'])

lr.fit(x_train2, y_train)

lr.intercept_

lr.coef_

y_pred_poly =lr.predict(x_test2)

mean_absolute_percentage_error(y_test, y_pred_poly)

r2_score(y_test, y_pred_poly)

